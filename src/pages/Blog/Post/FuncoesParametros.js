import React from 'react';

const PagesBlogFuncoesParametros = () => {

    return (
        <main className="container-post__one">
            <h3 className="container-text-general">Fun√ß√µes e par√¢metros</h3>

            <p>Para iniciar, vamos partir do princ√≠pio que os Devs que v√£o ler esse post j√° sabem o que uma fun√ß√£o faz, ent√£o vou encurtar.</p>

            <p className="container-text-general">
                Quando estamos iniciando, aprendemos quase que instantemente a forma como declaramos uma fun√ß√£o,
                mas levamos tempo para entender sobre seus par√¢metros e como trabalhar com eles. O objetivo deste post,
                n√£o √© s√≥ explicar de forma pr√°tica, mas te fazer um convite em como pensar, sobre esses tais par√¢metros.
            </p>

            <p className="container-text-general">
                Usamos par√¢metros a todo momento no JavaScript, mas no inicio quando estamos vendo aquilo, por pouco
                tempo, n√£o entendemos de forma t√£o clara como eles funcionam. Ent√£o uma dica valiosa, seria: nem sempre as coisas
                se parecem, quando um par√¢metro √© passado, por mais que ele venha nomeado de outro lugar, na fun√ß√£o
                que ele √© recebido, ele pode ser renomeado. Quando recebemos um par√¢metro, ele pode ser chamado de argumento,
                esse argumento √© recebido como par√¢metro e a partir desse momento podemos manipular o valor desse elemento.
                Quando recebemos o par√¢metro, por algum motivo podemos querer dar um nome mais descritivo para aquele contexto
                e por isso podemos renome-la e, √© nesse exato momento que as pessoas se perdem e as coisa come√ßam a perder
                o sentido. Fun√ß√µes s√£o assim, tem toda uma complexidade envolvida que ao longo do tempo voc√™ vai pegando.
            </p>
            <img
                src="/images/blog/funcoes-parametros/funcaoMaxValue.png"
                alt="imagem demonstrativa do exemplo"
                className="container-image"
            />
            <img
                src="/images/blog/funcoes-parametros/returnMaxValue.png"
                alt="imagem demonstrativa do exemplo"
                className="container-image"
            />
            <p className="container-text-general">
                No nosso exemplo recebemos um argumento como par√¢metro, como podemos ver na <code>(linha 17)</code>, esse par√¢metro que recebemos √© um <code>array</code> de n√∫meros inteiros <code>(linha 1)</code>, queremos saber qual √© o maior valor contido nele.
                Perceba que quando recebemos o argumento ele vem nomeado de <code><code>array</code> (linha 17)</code> mas quando o passamos como par√¢metro ele recebe o nome de <code>arr (linha 3)</code>, pois √©, chegamos no ponto, usei uma nova vari√°vel para guardar o valor do par√¢metro <code>(linha 5)</code> e para exemplificar
                melhor como os valores podem se modificar. Em alguns momentos o nome das vari√°veis que armazenam os valores podem
                estar sendo modificados, seja para fazer mais sentido ou para ser passado como par√¢metro, n√£o sei, mas pode acontecer.
            </p>

            <p className="container-text-general">
                Dentro da fun√ß√£o n√£o nada h√° demais, temos uma fun√ß√£o que percorre um <code>array</code> e verifica o valor de todas as suas posi√ß√µes, esse <code>array</code> foi passado como argumento <code>array</code> <code>(linha 17)</code>, recebeu o nome de arr no par√¢metro <code>(linha 3)</code> e logo ap√≥s foi chamado como valor dentro de
                uma vari√°vel nomeada de <code><strong>findMaxValue</strong> (linha 5)</code>, se<code>(if) <strong>maxValue</strong></code> for  maior <code>{'>'}</code> do que o valor de <code><strong>findMaxValue[i]</strong></code> <code>(linha 10)</code>, <code><strong>maxValue</strong></code> recebe
                o valor de <code><strong>findMaxValue[i]</strong></code> <code>(linha 12)</code> e por fim retornamos <code><strong>maxValue</strong></code> <code>(linha 15)</code> que foi a vari√°vel que recebeu o valor do maior n√∫mero do <code>array</code>.
            </p>

            <p className="container-text-general">Como estamos com um <code>console.log()</code> na fun√ß√£o exemplo <code>(linha 17)</code>, temos o valor que foi retornado.</p>

            <p className="container-text-general">
                Nesse exemplo tento mostra que valores podem ser nomeado por algum motivo e como par√¢metros s√£o recebidos
                como argumento em uma fun√ß√£o. Espero ter ajudado e nos vemos no pr√≥ximo post. At√© breveüññüèæ
            </p>

        </main>
    )
}

export default PagesBlogFuncoesParametros