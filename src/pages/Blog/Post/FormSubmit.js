import React from 'react';
import {CopyToClipboard} from 'react-copy-to-clipboard';
import toast, { Toaster } from 'react-hot-toast';

const PagesBlogFormSubmit = () => {
    // const [copied, setCopied] = useState(false)
    const form = '<form action="https://formsubmit.co/seu@email.com"method="POST"/>'
    const hidden = '<input type="hidden" name="_next" value="http://seudominio/seuarquivo.html"/>'

    return (
        <main className="container-post__one">
          <h3 className="container-title">
            Enviando formul√°rio sem programar Back-End com Formsubmit{" "}
          </h3>
          <p className="container-text-general">
            <p>
              Faaala Dev, tudo bem? Espero que sim. Passando pra deixar aquela
              dica!! At√© pouco tempo n√£o conhecia o <code>formsubmit</code>, uma
              forma bacana de ter uma aplica√ß√£o simples, desenvolvida com{" "}
              <code>HTML</code> e <code>CSS</code> e deploy na Vercel ou at√©
              mesmo no GitHub pages, com um formul√°rio funcionando e atendendo
              suas necessidades de contato. Sem mais delongas, vamos l√°!!
            </p>{" "}
            <p>
              A implementa√ß√£o √© simples e bem pr√°tica. √â como est√° na
              documenta√ß√£o do <code>formsubmit</code>, conecte seu formul√°rio!!
              A baixo temos uma estrutra feita em <code>HTML</code> bem simples
              com uma <code>tag form</code>, √© por ela que vamos iniciar. Na
              documenta√ß√£o oficial tamb√©m √© explicado de forma bem simples de
              entender. Basta copiar o c√≥digo abaixo e seguir o exemplo da
              imagem. Voc√™ deve apontar o atributo <code>action</code> para o
              endere√ßo do <code>formsubmit</code> juntamente com o endere√ßo de
              e-mail que voc√™ deseja receber os dados do formul√°rio, ap√≥s tamb√©m
              colocamos o atributo <code>method</code> que define qual o m√©todo{" "}
              <code>HTTP</code> para enviar os dados, no caso queremos o m√©todo{" "}
              <code>POST</code>.
            </p>
            <br />
            <CopyToClipboard text={form}>
              <p
                className="container-copytoclipboard"
                onClick={() => toast("Copiado!")}
              >
                {form}
              </p>
            </CopyToClipboard>
            <Toaster />{" "}
          </p>
          <img
            src="/images/blog/form-submit/fs-img-one.png"
            alt="imagem demonstrativa do exemplo"
            className="container-image"
          />
          <p className="container-text-general">
            <div className="container-text-list">
              <p>
                Logo ap√≥s iremos incluir na <code>tag input</code> o atributo{" "}
                <code>type</code> com o valor <code>hidden</code> (escondido),
                para que este <code>input</code> fique invis√≠vel (essa
                configura√ß√£o √© feita pelo <code>formsubmit</code>), tamb√©m temos
                mais duas <code>tags</code> para declarar no c√≥digo,{" "}
                <code>name</code> e <code>value</code>, o atributo{" "}
                <code>name</code> recebi o valor <code>_next</code> (pr√≥ximo)
                que ir√° junto com a <code>tag value</code> se encarregar de nos
                redirecionar para o endere√ßo onde configuramos nossa p√°gina de
                confirma√ß√£o. Perceba que ap√≥s o endere√ßo <code>HTTP</code> foi
                adicionado um novo documento <code>HTML</code>.
              </p>
              <br />
              <CopyToClipboard text={hidden}>
                <p
                  className="container-copytoclipboard"
                  onClick={() => toast("Copiado!")}
                >
                  {hidden}
                </p>
              </CopyToClipboard>
              <Toaster />{" "}
            </div>
          </p>
          <img
            src="/images/blog/form-submit/fs-img-two.png"
            alt="imagem demonstrativa do exemplo"
            className="container-image"
          />
          <p className="container-text-general">
            √â exatamente para l√° que iremos ir ap√≥s marcar que n√£o somos um rob√¥
            no CAPTCHA.
          </p>
          <img
            src="/images/blog/form-submit/fs-img-three.png"
            alt="imagem demonstrativa do exemplo"
            className="container-image"
          />
          <p className="container-text-general">
            Configurei uma mensagem bem simples, o intuito √© dar um Feedback e
            deixar op√ß√µes como um <code>link</code> ‚ÄúVoltar‚Äù que implementei
            para o usu√°rio ser redirecionado para a p√°gina <code>home</code> e
            permanecer na aplica√ß√£o caso seja o intuito dele.
          </p>
          <img
            src="/images/blog/form-submit/fs-img-four.png"
            alt="imagem demonstrativa do exemplo"
            className="container-image"
          />
          <p className="container-text-general">
            Por √∫ltimo, devemos nos atentar que nosso formul√°rio deve conter um{" "}
            <code>input</code> com o atributo <code>type</code> e com seu valor{" "}
            <code>email</code>, para que ap√≥s o formul√°rio ser preenchido pelo
            usu√°rio e encaminhado para seu e-mail possamos responder o e-mail
            diretamente para o e-mail informado pelo usu√°rio.
          </p>
          <img
            src="/images/blog/form-submit/fs-img-five.png"
            alt="imagem demonstrativa do exemplo"
            className="container-image"
          />
          <p className="container-text-general">
            Com isso finalizamos nossa aplica√ß√£o. Espero ter ajudado e nos vemos
            no pr√≥ximo post. At√© breveüññüèæ
          </p>

        </main>
    );
}

export default PagesBlogFormSubmit