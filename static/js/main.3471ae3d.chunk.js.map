{"version":3,"sources":["components/Header/Header.js","components/Footer/Footer.js","pages/Main/Main.js","pages/AboutMe/AboutMe.js","pages/Blog/PostsCard/Posts2k21.js","pages/Blog/PostsCard/Posts2k22.js","pages/Blog/PostsCard/Posts2k22-1.js","pages/Blog/Blog.js","pages/Blog/Post/AsyncAwait.js","pages/Blog/Post/FormSubmit.js","pages/Blog/Post/FuncoesParametros.js","Routes.js","App.js","index.js"],"names":["Header","className","to","href","class","src","alt","type","id","for","Footer","target","rel","PagesMain","PagesAboutMe","PagesBlogPostsCard","PagesBlogPostsCardFormSubmit","PagesBlogPostsCardFuncoesParametros","PagesBlog","PagesBlogAsyncAwait","PagesBlogFormSubmit","form","hidden","text","onClick","toast","PagesBlogFuncoesParametros","IndexRoutes","exact","path","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3471ae3d.chunk.js","sourcesContent":["import React from 'react';\nimport { Link } from \"react-router-dom\";\n\nconst Header = () => {\n    return (\n          <header className=\"header\">\n            <Link className=\"\" to=\"/\" href=\"\" class=\"logo\">\n              <img\n                src=\"/images/logo/jveiga.png\"\n                className=\"image-logo\"\n                alt={\"my logo\"}\n              />\n            </Link>\n            <input className=\"menu-btn\" type=\"checkbox\" id=\"menu-btn\" />\n            <label className=\"menu-icon\" for=\"menu-btn\">\n              <span className=\"navicon\"></span>\n            </label>\n              <ul className=\"menu\">\n              <div className=\"switch\">\n              </div>\n                <li>\n                  <Link to=\"/about\">About me</Link>\n                </li>\n                <li>\n                  <Link to=\"Blog\">Blog</Link>\n                </li>\n              </ul>\n          </header>\n    );\n}\n\nexport default Header;","import React from 'react';\n\n\nconst Footer = () => {\n    return (\n      <footer className=\"container-footer\">\n        <div className=\"container-icon-text\">\n          <div>\n            <img\n              src=\"https://img.icons8.com/plumpy/24/000000/code.png\"\n              alt=\"icon codigo font\"\n            />\n          </div>\n          <div className=\"container-text__footer\">\n            <p>por Jeferson Veiga</p>\n          </div>\n        </div>\n        <div>\n          <div className=\"container-icons\">\n            {/* github */}\n            <a\n              target=\"_blank\"\n              rel=\"noreferrer\"\n              href=\"https://github.com/jveiiga\"\n            >\n              <img\n                src=\"https://img.icons8.com/ios-filled/30/000000/github.png\"\n                alt=\"icon github\"\n              />\n            </a>\n            {/* linkedin */}\n            <a\n              target=\"_blank\"\n              rel=\"noreferrer\" \n              href=\"https://www.linkedin.com/in/jveiiga/\">\n              <img\n                src=\"https://img.icons8.com/ios-glyphs/30/000000/linkedin.png\"\n                alt=\"icon linkedin\"\n              />\n            </a>\n            {/* e-mail */}\n            <a\n              target=\"_blank\"\n              rel=\"noreferrer\"\n              href=\"mailto:jeferson.veiiga@icloud.com\"\n            >\n              <img\n                src=\"https://img.icons8.com/external-kiranshastry-solid-kiranshastry/35/000000/external-email-interface-kiranshastry-solid-kiranshastry.png\"\n                alt=\"icon email\"\n              />\n            </a>\n            {/* instagram */}\n            <a\n              target=\"_blank\"\n              rel=\"noreferrer\"\n              href=\"https://www.instagram.com/jveiga.dev/\"\n            >\n              <img\n                src=\"https://img.icons8.com/glyph-neue/344/instagram-new.png\"\n                alt=\"icon instagram\"\n              />\n            </a>\n          </div>\n        </div>\n      </footer>\n    );\n}\n\nexport default Footer;","import React from 'react';\nimport Footer from '../../components/Footer/Footer'\n\n\nconst PagesMain = () => {\n    return (\n        <main className=\"container-main\">\n        <img\n          src=\"/images/my-image/my_image.png\"\n          alt=\"it's me\"\n          className=\"container-my-image__mobile\"\n        />\n        <img\n          src=\"/images/my-image/my_image.png\"\n          alt=\"it's me\"\n          className=\"container-my-image__tablet\"\n        />\n        <p className=\"container-text\">\n          Hello World! <br />\n          I'm Jeferson Veiga, front-end developer. <br />I love sports, games and\n          coffee. <br /> Some of my works are available here, feel free!\n        </p>\n        <Footer/>\n      </main>\n    )\n}\n\nexport default PagesMain;","import React from 'react';\nimport Footer from 'components/Footer/Footer'\n\n\n\nconst PagesAboutMe = () => {\n  return (\n    <main className=\"container-main__AboutMe\">\n      <div className=\"\">\n        <p className=\"container-text__header\">\n          Hey THERE, I’m Jeferson Veiga! ✨\n        </p>\n\n        <p className=\"container-text-part__one\">About me?</p>\n\n        <p className=\"container-text-part__two\">\n          I always found it difficult to define me, some people like sports,\n          others like games,but me, I like it all it. In resume, I think I'm\n          an enthusiast of technology, a quiet person who loves venture,\n          playing sports and learn new things. My name is Jeferson Veiga, I'm\n          33 years old, am Paulista and currently reside in the east side.\n          Since March I have been studying Full-Stack development at Kenzie \n          Academy where I have gained a lot of knowledge of Hard-Skills and \n          Soft-Skills. I'm a Developer Front end with a feel for UI design.\n        </p>\n\n        <p className=\"container-text-title__img\">I have language skills:</p>\n        <div className=\"container-img-stacks\">\n          <img src=\"/images/logo/html-logo.png\" alt=\"loog html\" />\n          <img src=\"/images/logo/css-logo.png\" alt=\"logo css\" />\n          <img src=\"/images/logo/js-logo.png\" alt=\"logo javascript\" />\n        </div>\n        <p className=\"container-text-part__three\">\n          And I have experience with Sass and Bootstrap. I am currently\n          dedicated to learning React, Next and TypeScript, working on\n          projects with API consumption, componentization and pagination. I\n          like to learn new things and I love develop, I'm always looking for\n          new challenges and solid foundations, despite the little experience.\n        </p>\n\n        <p className=\"container-text-footer\">\n          My contact email, GitHub and LinkedIn are just below. I am open to\n          questions whenever to need.\n        </p>\n        <p>Hugs! 🤝👋</p>\n      </div>\n      <Footer />\n    </main>\n  );\n}\n\nexport default PagesAboutMe;","import React from 'react';\nimport { Link } from 'react-router-dom';\n\n\n\n\nconst PagesBlogPostsCard = () => {\n    return (\n      <main className=\"container-post__title\">\n        <span className=\"container-title__card\">2021</span>\n        <Link to=\"/Async-Await\">\n          <section className=\"container-card\">\n            <h2>Promises and Async/Await</h2>\n            <p>17 Novembro 2021</p>\n          </section>\n        </Link>\n      </main>\n    );\n}\n\nexport default PagesBlogPostsCard;","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nconst PagesBlogPostsCardFormSubmit = () => {\n    return (\n      <>\n        <main className=\"container-post\">\n          <span className=\"container-title__card\">2022</span>\n          <Link to=\"/FormSubmit\">\n            <section className=\"container-card\">\n              <h2>Enviando formulário sem programar Back-End com Formsubmit</h2>\n              <p>06 Março 2022</p>\n            </section>\n          </Link>\n        </main>\n      </>\n    );\n}\n\nexport default PagesBlogPostsCardFormSubmit;","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport Footer from 'components/Footer/Footer'\n\n\n\n\nconst PagesBlogPostsCardFuncoesParametros = () => {\n    return (\n      <main className=\"container-post\">\n        <Link to=\"/FuncoesParametros\">\n          <section className=\"container-card\">\n            <h2>Funções e parâmetros</h2>\n            <p>15 Agosto 2022</p>\n          </section>\n        </Link>\n        <Footer />\n      </main>\n    );\n}\n\nexport default PagesBlogPostsCardFuncoesParametros;","import React from 'react';\n\nimport PagesBlogAsyncAwait from './PostsCard/Posts2k21'\nimport PagesBlogFormSubmit from './PostsCard/Posts2k22'\nimport PagesBlogFuncoesParametros from './PostsCard/Posts2k22-1';\n\nconst PagesBlog = () => {\n    return (\n        <>\n            <PagesBlogAsyncAwait />\n            <PagesBlogFormSubmit />\n            <PagesBlogFuncoesParametros />\n        </>\n    );\n}\n\nexport default PagesBlog;","import React from 'react';\n\n\nconst PagesBlogAsyncAwait = () => {\n    return (\n      <main className=\"container-post__one\">\n        <h3 className=\"container-title\">Promises and Async, Await</h3>\n        <p className=\"container-text-general\">\n          <p>\n            Faaala Dev, tudo bem? Espero que sim. Para iniciar as postagens do\n            blog resolvi escolher um tema que vem se fazendo cada dia mais\n            presente na minha jornada. Sem mais delongas, vamos lá !!\n          </p>{\" \"}\n          <p>\n            Depois de algum tempo programando em JavaScript, confesso que me\n            acostumei a utiliza-lo de forma síncrona, vendo blocos de códigos\n            sendo executados linha após linha e a pensar de forma síncrona de\n            programá-los, mas e se houvesse outras possibilidades que fizessem\n            esse trabalho ficar mais assíncrono, tornando as{\" \"}\n            <code>Promises</code> e a componentização mais reutilizável e\n            facilitando também a manutenção do código? Foi com essa missão que\n            esses recursos foram implementados pelo ECMAScript 2017. Não vou\n            focar em como as coisas eram e como agora são, até por que já tem\n            bastante conteúdo disponível, com muito mais qualidade e muito bem\n            feito! Diferente disso quero apenas trazer uma abordagem que talvez\n            ajude alguém em algum lugar que esteja buscando uma estratégia para\n            começar a utiliza-lá.\n          </p>{\" \"}\n          <p>\n            Na minha cabeça <code>Promises</code> faz mais sentido quando\n            começamos a consumir APis, ter nossas requisições feitas por um\n            componente específico e declara-lo em funções assíncronas quando\n            precisamos fazer a chamada dos dados, é algo que torna o código de\n            fácil compreensão e leitura, alem de torna-lo um código que tende a\n            crescer para baixo sem formar aquela “barriga”, deixando seu\n            aninhamento menos complexo. Vale lembrar que o JavaScript continuará\n            executando os blocos de código de forma síncrona, mas esses requests\n            que são passados para uma thread separada, fazem com que o código\n            continue executando normalmente sem travar seu fluxo, fazendo o\n            request dos dados e adicionando a função de callback ao fim da fila\n            de funções.\n          </p>\n          <p>\n            Neste exemplo logo abaixo que foi construído utilizando a APi\n            Pokemon, é criado um componente chamado <code>services</code>, esse\n            componente tem como objetivo fazer algumas de nossas requisições. A\n            primeira função\n            <code>getAllPokemon</code> tem como objetivo retornar um JSON de\n            todos os Pokemons listados na APi, a função recebe como parâmetro a{\" \"}\n            <code>URL</code> e retorna uma nova promessa (\n            <code>new Promise</code>) que recebe outros parâmetros padrão,{\" \"}\n            <code>resolve</code> e <code>reject</code>, logo após é feito um{\" \"}\n            <code>fetch</code> para a <code>URL</code> e um <code>THEN</code>{\" \"}\n            que faz a busca e verificação do JSON e logo abaixo outro{\" \"}\n            <code>THEN</code> que será executado assim que o JSON dos Pokemons\n            retornar.\n          </p>{\" \"}\n          A segunda função, tem os mesmos objetivo, mas ao invés de ser\n          utilizada para listar todos os Pokemons, ela vai ser utilizada para\n          exibir individualmente esses Pokemons. Achei melhor iniciar com esse\n          componente para dar contexto as funções que vão receber esse parâmetro\n          no nosso App.\n        </p>\n        <img\n          src=\"/images/blog/async-await/imageOne.png\"\n          alt=\"imagem demonstrativa do exemplo\"\n          className=\"container-image\"\n        />\n        <p className=\"container-text-general\">\n          <div className=\"container-text-list\">\n            <p>\n              Em nosso App, iniciamos nossa função declarando as variáveis que\n              serão utilizadas. Utilizando o <code>useState</code>, iremos\n              implementar as seguintes funcionalidades:\n            </p>\n          </div>\n          <ul>\n            <li>\n              ⚫️ <code>pokemonData</code> - Inicialmente recebe um Array vazio\n              e retorna a listagem de todos os Pokemons da APi.\n            </li>\n            <li>\n              ⚫️ <code>nextUrl</code> - Inicialmente recebe uma String vazia e\n              quando o estado é alterado, recebe os parâmetros dos próximos\n              Pokemons vindo da APi.\n            </li>\n            <li>\n              ⚫️ <code>prevURL</code> - Tem praticamente as mesmas funções da\n              nextUrl, exceto uma condicional que verifica se há ou não uma\n              página anterior.\n            </li>\n            <li>\n              ⚫️ <code>loading</code> - Inicialmente recebe um valor booleano\n              (true), verifica e executa o carregamento dos dados da primeira\n              página da APi.\n            </li>\n            <li>\n              ⚫️ <code>initialUrl</code> - Armazena os dados que retornam da\n              APi para serem manipulados da melhor forma durante o\n              desenvolvimento do programa.\n            </li>\n          </ul>\n        </p>\n        <img\n          src=\"/images/blog/async-await/imageTwo.png\"\n          alt=\"imagem demonstrativa do exemplo\"\n          className=\"container-image\"\n        />\n        <p className=\"container-text-general\">\n          Utilizando o <code>useEffect</code>, vamos cuidar da renderização dos\n          dados da APi através dos components de <code>state</code>.\n          Declamáramos inicialmente uma função assíncrona chamada{\" \"}\n          <code>fetchData</code> (buscaDeDados). Logo após declaramos uma nova\n          variável chamada <code>response</code>, é preciso que seja passado o{\" \"}\n          <code>await</code>\n          (aguardando), uma vez que estamos utilizando uma função declarada como\n          assíncrona, ela também recebe os valores de <code>\n            getAllPokemon\n          </code>{\" \"}\n          que estão vindo de component <code>services/pokemon.js</code>, essa\n          variável recebe como parâmetro nossa <code>initialUrl</code>.{\" \"}\n          <code>setNextUrl</code> defini o estado da próxima página que será\n          carregada e guarda os valores no <code>state</code> do react recebendo\n          como parâmetro os dados de <code>response.next</code> vindos da APi.{\" \"}\n          <code>setPrevUrl</code>\n          defini o estado da página anterior que será carregada caso haja uma, e\n          guarda os valores no <code>state</code> do react recebendo como\n          parâmetro os dados de <code>response.previous</code> vindos da APi. E\n          novamente usaremos o <code>await</code>\n          (aguardando), desta vez para carregar e guardar o <code>\n            state\n          </code>{\" \"}\n          da nossa lista de Pokemons. <code>setLoading</code> é declarada como{\" \"}\n          <code>false</code> uma vez que já ocorreu o carregamento da nossa\n          lista de Pokemons quando o programa executou o <code>useState</code>{\" \"}\n          da nossa variável. E por ultimo e não menos importante, passamos a\n          função <code>fetchData</code> que irá buscar os dados. Você pode fazer\n          um <code>console.log(response)</code> abaixo da variável{\" \"}\n          <code>let response</code> e ver os valores retornando no browser.\n        </p>\n        <img\n          src=\"/images/blog/async-await/imageThree.png\"\n          alt=\"imagem demonstrativa do exemplo\"\n          className=\"container-image\"\n        />\n        <p className=\"container-text-general\">\n          Agora que temos o retorno do nosso array de Pokemons, precisamos\n          trabalhar no <code>state</code> que já definimos (\n          <code>setPokemonData</code>) e que lidará com o armazenamento e\n          carregamento dos dados que retornaram da APi. Iniciamos criando uma\n          função assíncrona <code>loadPokemon</code> (carregar Pokemon) que\n          recebe como propriedade os dados (<code>data</code>) e retorna um\n          callback de duas variáveis. A primeira <code>_pokemonData</code>{\" \"}\n          recebe o <code>await</code> e aguarda a<code>Promise.all</code> (todas\n          a promessas), fazendo um <code>data.map</code> do nosso array e\n          definindo de forma assíncrona que a propriedade <code>pokemon</code>{\" \"}\n          retorne o objeto para a segunda variável criada,{\" \"}\n          <code>pokemonRecord</code> (gravando Pokemon), que tem como seu valor{\" \"}\n          <code>getPokemon</code> (obtendo Pokemon) e recebendo como sua\n          propriedade <code>pokemon</code> (<code>services/pokemon.js</code>),\n          por fim fazemos o retorno da função <code>pokemonRecord</code> e\n          “setamos” um <code>state</code> para\n          <code>setPokemonData</code> que recebe como parâmetro os dados obtidos\n          da variável\n          <code>_pokemonData</code> e renderizará nosso <code>state</code>.\n        </p>\n        <img\n          src=\"/images/blog/async-await/imageFour.png\"\n          alt=\"imagem demonstrativa do exemplo\"\n          className=\"container-image\"\n        />\n        <p className=\"container-text-general\">\n          Vamos então, verificarmos o retorno e tratar da sua renderização em\n          tela, logo após podemos ver a implementação dos botões. Usando o{\" \"}\n          <code>state</code>\n          <code>pokemonData</code> criado para armazenar o array de pokemons,\n          fazemos um <code>map</code>\n          para a criação do array que será renderizado e recebemos{\" \"}\n          <code>pokemon</code> como parâmetro do retorno do objeto que nada mais\n          é, do que nosso component <code>Card</code> que recebe como\n          propriedade nosso outro component <code>pokemon</code>.\n        </p>\n        <img\n          src=\"/images/blog/async-await/imageFive.png\"\n          alt=\"imagem demonstrativa do exemplo\"\n          className=\"container-image\"\n        />\n        <p className=\"container-text-general\">\n          Após ser feita a renderização dos dados, podemos lidar com a\n          implementação das funções dos botões: anterior e próximo. Iniciamos\n          nossa função <code>next</code> que também deve ser uma função\n          assíncrona e que retorna <code>setLoading</code>, onde usamos seu\n          valor inicial (<code>true</code>) para fazer o carregamento dos dados,\n          e logo após definimos a variável <code>data</code> que recebe{\" \"}\n          <code>await</code> (aguardando) e aguarda os dados vindos da nossa\n          função\n          <code>getAllPokemon</code> que estão vindo de{\" \"}\n          <code>services/pokemon</code> e recebe como parâmetro{\" \"}\n          <code>nextUrl</code> vindo da APi. Novamente usamos o{\" \"}\n          <code>await</code> (aguardando) para aguardar os dados que retornan da\n          nossa função <code>loadPokemon</code> e que tem como objetivo definir\n          um novo array sem alterar o anterior, armazenar e gravar os resultados\n          vindo da APi. <code>setNextUrl</code> armazena os dados do nosso\n          próximo <code>state</code> pegando os dados vindo da APi através de\n          <code>data.next</code>.\n        </p>\n        <img\n          src=\"/images/blog/async-await/imageSix.png\"\n          alt=\"imagem demonstrativa do exemplo\"\n          className=\"container-image\"\n        />\n        <p className=\"container-text-general\">\n          <code>setPrevUrl</code> também tem as mesmas funcionalidades, exceto\n          que seu armazenamento é feito somente caso haja uma página anterior,\n          como podemos verificar de acordo com a condicional <code>if</code> no\n          exemplo a baixo. Por ultimo “setamos” <code>setLoading</code> como{\" \"}\n          <code>false</code> para que não haja mais carregamentos, uma vez que\n          já obtivemos os dados.\n        </p>\n        <img\n          src=\"/images/blog/async-await/imageSeven.png\"\n          alt=\"imagem demonstrativa do exemplo\"\n          className=\"container-image\"\n        />\n        <p className=\"container-text-general\">\n          <code>loadPokemon</code> tem como parâmetro os dados que retornam da\n          APi (<code>data</code>).\n          <code>let _pokemonData</code>, recebe e aguarda (<code>await</code>)\n          que todas (<code>all</code>) as <code>Promises</code>\n          tenham sido resolvidas e após serem resolvidas queremos que todas\n          essas <code>Promises</code> nos retornem a matriz dos dados (objetos)\n          coletados. Faremos um mapeamento da matriz através do{\" \"}\n          <code>data.map</code>. Logo após passamos uma função assíncrona para{\" \"}\n          <code>pokemon</code> e definimos uma nova variável dentro do escopo,\n          chamada <code>pokemonRecord</code> (gravando pokemons), essa variável\n          tem como objetivo guardar os dados individuais de cada objeto (\n          <code>pokemon</code>) vindos do array e aguardar os dados vindos do\n          component <code>pokemon</code>, mas principalmente da função{\" \"}\n          <code>getPokemon</code> (obter pokemon). Após fazermos o mapeamento e\n          obtermos todos os dados, retornamos os dados armazenados e em seguida\n          passamos a armazena-los novamente em nosso <code>state</code> do react\n          (<code>useEffect</code>) com <code>setPokemonData</code>, passamos\n          como parâmetro nossa função <code>_pokemonData</code> e assim temos o\n          <code>fetch</code> dos dados disponíveis para exibição.\n        </p>\n        <img\n          src=\"/images/blog/async-await/imageEight.png\"\n          alt=\"imagem demonstrativa do exemplo\"\n          className=\"container-image\"\n        />\n        <p className=\"container-text-general\">\n          Com as implementações feitas, iremos cuidar agora do processo de\n          renderização de nossos components. Iremos passar dentro da{\" \"}\n          <code>div “card__name”</code> nossos objetos. Iniciamos fazendo um\n          mapeando de\n          <code>pokemonData</code> que receberá nosso component (objeto){\" \"}\n          <code>pokemon</code>, junto com o valor da nossa chave{\" \"}\n          <code>kei</code>. Logo após retornamos nossos dados (objetos), dentro\n          do nosso component <code>Card</code> e passamos duas propriedades:{\" \"}\n          <code>kei</code> com o valor <code>i</code> e <code>pokemon</code> com\n          o objeto <code>pokemon</code>. Pronto! Agora já é possível ver no\n          browser os dados vindos da nossa APi pokeAPI. Para finalizar vamos\n          adicionar alguns eventos aos botões que estão implementados logo a\n          baixo. Usando o manipulador de eventos do react, <code>onClick</code>,\n          passamos os parâmetros da nossa <code>URL</code> (APi),{\" \"}\n          <code>prev</code> e <code>next</code>.\n        </p>\n        <img\n          src=\"/images/blog/async-await/imageNine.png\"\n          alt=\"imagem demonstrativa do exemplo\"\n          className=\"container-image\"\n        />\n        <p className=\"container-text-general\">\n          Com isso finalizamos nossa aplicação. Espero ter ajudado e nos\n          vemos no próximo post. Até breve🖖🏾\n        </p>\n      </main>\n    );\n}\n\nexport default PagesBlogAsyncAwait;","import React from 'react';\nimport {CopyToClipboard} from 'react-copy-to-clipboard';\nimport toast, { Toaster } from 'react-hot-toast';\n\nconst PagesBlogFormSubmit = () => {\n    // const [copied, setCopied] = useState(false)\n    const form = '<form action=\"https://formsubmit.co/seu@email.com\"method=\"POST\"/>'\n    const hidden = '<input type=\"hidden\" name=\"_next\" value=\"http://seudominio/seuarquivo.html\"/>'\n\n    return (\n        <main className=\"container-post__one\">\n          <h3 className=\"container-title\">\n            Enviando formulário sem programar Back-End com Formsubmit{\" \"}\n          </h3>\n          <p className=\"container-text-general\">\n            <p>Faaala Dev, tudo bem? Espero que sim. Passando pra deixar aquela\n              dica!! Até pouco tempo não conhecia o <code>formsubmit</code>, uma\n              forma bacana de ter uma aplicação simples, desenvolvida com{\" \"}\n              <code>HTML</code> e <code>CSS</code> e deploy na Vercel ou até\n              mesmo no GitHub pages, com um formulário funcionando e atendendo\n              suas necessidades de contato. Sem mais delongas, vamos lá!!\n            </p>{\" \"}\n            <p>\n              A implementação é simples e bem prática. É como está na\n              documentação do <code>formsubmit</code>, conecte seu formulário!!\n              A baixo temos uma estrutra feita em <code>HTML</code> bem simples\n              com uma <code>tag form</code>, é por ela que vamos iniciar. Na\n              documentação oficial também é explicado de forma bem simples de\n              entender. Basta copiar o código abaixo e seguir o exemplo da\n              imagem. Você deve apontar o atributo <code>action</code> para o\n              endereço do <code>formsubmit</code> juntamente com o endereço de\n              e-mail que você deseja receber os dados do formulário, após também\n              colocamos o atributo <code>method</code> que define qual o método{\" \"}\n              <code>HTTP</code> para enviar os dados, no caso queremos o método{\" \"}\n              <code>POST</code>.\n            </p>\n            <br />\n            <CopyToClipboard text={form}>\n              <p\n                className=\"container-copytoclipboard\"\n                onClick={() => toast(\"Copiado!\")}\n              >\n                {form}\n              </p>\n            </CopyToClipboard>\n            <Toaster />{\" \"}\n          </p>\n          <img\n            src=\"/images/blog/form-submit/fs-img-one.png\"\n            alt=\"imagem demonstrativa do exemplo\"\n            className=\"container-image\"\n          />\n          <p className=\"container-text-general\">\n            <div className=\"container-text-list\">\n              <p>\n                Logo após iremos incluir na <code>tag input</code> o atributo{\" \"}\n                <code>type</code> com o valor <code>hidden</code> (escondido),\n                para que este <code>input</code> fique invisível (essa\n                configuração é feita pelo <code>formsubmit</code>), também temos\n                mais duas <code>tags</code> para declarar no código,{\" \"}\n                <code>name</code> e <code>value</code>, o atributo{\" \"}\n                <code>name</code> recebi o valor <code>_next</code> (próximo)\n                que irá junto com a <code>tag value</code> se encarregar de nos\n                redirecionar para o endereço onde configuramos nossa página de\n                confirmação. Perceba que após o endereço <code>HTTP</code> foi\n                adicionado um novo documento <code>HTML</code>.\n              </p>\n              <br />\n              <CopyToClipboard text={hidden}>\n                <p\n                  className=\"container-copytoclipboard\"\n                  onClick={() => toast(\"Copiado!\")}\n                >\n                  {hidden}\n                </p>\n              </CopyToClipboard>\n              <Toaster />{\" \"}\n            </div>\n          </p>\n          <img\n            src=\"/images/blog/form-submit/fs-img-two.png\"\n            alt=\"imagem demonstrativa do exemplo\"\n            className=\"container-image\"\n          />\n          <p className=\"container-text-general\">\n            É exatamente para lá que iremos ir após marcar que não somos um robô\n            no CAPTCHA.\n          </p>\n          <img\n            src=\"/images/blog/form-submit/fs-img-three.png\"\n            alt=\"imagem demonstrativa do exemplo\"\n            className=\"container-image\"\n          />\n          <p className=\"container-text-general\">\n            Configurei uma mensagem bem simples, o intuito é dar um Feedback e\n            deixar opções como um <code>link</code> “Voltar” que implementei\n            para o usuário ser redirecionado para a página <code>home</code> e\n            permanecer na aplicação caso seja o intuito dele.\n          </p>\n          <img\n            src=\"/images/blog/form-submit/fs-img-four.png\"\n            alt=\"imagem demonstrativa do exemplo\"\n            className=\"container-image\"\n          />\n          <p className=\"container-text-general\">\n            Por último, devemos nos atentar que nosso formulário deve conter um{\" \"}\n            <code>input</code> com o atributo <code>type</code> e com seu valor{\" \"}\n            <code>email</code>, para que após o formulário ser preenchido pelo\n            usuário e encaminhado para seu e-mail possamos responder o e-mail\n            diretamente para o e-mail informado pelo usuário.\n          </p>\n          <img\n            src=\"/images/blog/form-submit/fs-img-five.png\"\n            alt=\"imagem demonstrativa do exemplo\"\n            className=\"container-image\"\n          />\n          <p className=\"container-text-general\">\n            Com isso finalizamos nossa aplicação. Espero ter ajudado e nos vemos\n            no próximo post. Até breve🖖🏾\n          </p>\n\n        </main>\n    );\n}\n\nexport default PagesBlogFormSubmit","import React from 'react';\n\nconst PagesBlogFuncoesParametros = () => {\n\n    return (\n        <main className=\"container-post__one\">\n            <h3 className=\"container-text-general\">Funções e parâmetros</h3>\n\n            <p>Para iniciar, vamos partir do princípio que os Devs que vão ler esse post já sabem o que uma função faz, então vou encurtar.</p>\n\n            <p className=\"container-text-general\">\n                Quando estamos iniciando, aprendemos quase que instantemente a forma como declaramos uma função,\n                mas levamos tempo para entender sobre seus parâmetros e como trabalhar com eles. O objetivo deste post,\n                não é só explicar de forma prática, mas te fazer um convite em como pensar, sobre esses tais parâmetros.\n            </p>\n\n            <p className=\"container-text-general\">\n                Usamos parâmetros a todo momento no JavaScript, mas no inicio quando estamos vendo aquilo, por pouco\n                tempo, não entendemos de forma tão clara como eles funcionam. Então uma dica valiosa, seria: nem sempre as coisas\n                se parecem, quando um parâmetro é passado, por mais que ele venha nomeado de outro lugar, na função\n                que ele é recebido, ele pode ser renomeado. Quando recebemos um parâmetro, ele pode ser chamado de argumento,\n                esse argumento é recebido como parâmetro e a partir desse momento podemos manipular o valor desse elemento.\n                Quando recebemos o parâmetro, por algum motivo podemos querer dar um nome mais descritivo para aquele contexto\n                e por isso podemos renome-la e, é nesse exato momento que as pessoas se perdem e as coisa começam a perder\n                o sentido. Funções são assim, tem toda uma complexidade envolvida que ao longo do tempo você vai pegando.\n            </p>\n            <img\n                src=\"/images/blog/funcoes-parametros/funcaoMaxValue.png\"\n                alt=\"imagem demonstrativa do exemplo\"\n                className=\"container-image\"\n            />\n            <img\n                src=\"/images/blog/funcoes-parametros/returnMaxValue.png\"\n                alt=\"imagem demonstrativa do exemplo\"\n                className=\"container-image\"\n            />\n            <p className=\"container-text-general\">\n                No nosso exemplo recebemos um argumento como parâmetro, como podemos ver na <code>(linha 17)</code>, esse parâmetro que recebemos é um <code>array</code> de números inteiros <code>(linha 1)</code>, queremos saber qual é o maior valor contido nele.\n                Perceba que quando recebemos o argumento ele vem nomeado de <code><code>array</code> (linha 17)</code> mas quando o passamos como parâmetro ele recebe o nome de <code>arr (linha 3)</code>, pois é, chegamos no ponto, usei uma nova variável para guardar o valor do parâmetro <code>(linha 5)</code> e para exemplificar\n                melhor como os valores podem se modificar. Em alguns momentos o nome das variáveis que armazenam os valores podem\n                estar sendo modificados, seja para fazer mais sentido ou para ser passado como parâmetro, não sei, mas pode acontecer.\n            </p>\n\n            <p className=\"container-text-general\">\n                Dentro da função não nada há demais, temos uma função que percorre um <code>array</code> e verifica o valor de todas as suas posições, esse <code>array</code> foi passado como argumento <code>array</code> <code>(linha 17)</code>, recebeu o nome de arr no parâmetro <code>(linha 3)</code> e logo após foi chamado como valor dentro de\n                uma variável nomeada de <code><strong>findMaxValue</strong> (linha 5)</code>, se<code>(if) <strong>maxValue</strong></code> for  maior <code>{'>'}</code> do que o valor de <code><strong>findMaxValue[i]</strong></code> <code>(linha 10)</code>, <code><strong>maxValue</strong></code> recebe\n                o valor de <code><strong>findMaxValue[i]</strong></code> <code>(linha 12)</code> e por fim retornamos <code><strong>maxValue</strong></code> <code>(linha 15)</code> que foi a variável que recebeu o valor do maior número do <code>array</code>.\n            </p>\n\n            <p className=\"container-text-general\">Como estamos com um <code>console.log()</code> na função exemplo <code>(linha 17)</code>, temos o valor que foi retornado.</p>\n\n            <p className=\"container-text-general\">\n                Nesse exemplo tento mostra que valores podem ser nomeado por algum motivo e como parâmetros são recebidos\n                como argumento em uma função. Espero ter ajudado e nos vemos no próximo post. Até breve🖖🏾\n            </p>\n\n        </main>\n    )\n}\n\nexport default PagesBlogFuncoesParametros","import React from 'react';\nimport {Switch, Route} from 'react-router-dom';\nimport PagesMain from './pages/Main/Main';\nimport PagesAboutMe from './pages/AboutMe/AboutMe';\nimport PagesBlog from './pages/Blog/Blog';\nimport PagesBlogAsyncAwait from './pages/Blog/Post/AsyncAwait';\nimport PagesBlogFormSubmit from 'pages/Blog/Post/FormSubmit';\nimport PagesBlogFuncoesParametros from './pages/Blog/Post/FuncoesParametros';\n\nconst IndexRoutes = () => {\n  return (\n    <Switch>\n      <Route exact path=\"/\">\n        <PagesMain />\n      </Route>\n      <Route exact path=\"/about\">\n        <PagesAboutMe />\n      </Route>\n      <Route exact path=\"/blog\">\n        <PagesBlog />\n      </Route>\n      <Route exact path=\"/Async-Await\">\n        <PagesBlogAsyncAwait />\n      </Route>\n      <Route exact path=\"/FormSubmit\">\n        <PagesBlogFormSubmit />\n      </Route>\n      <Route exact path=\"/FuncoesParametros\">\n        <PagesBlogFuncoesParametros />\n      </Route>\n    </Switch>\n  );  \n}\n\nexport default IndexRoutes;","import Header from \"./components/Header/Header.js\";\nimport IndexRoutes from \"./Routes\";\nimport { BrowserRouter } from \"react-router-dom\";\n\nimport \"./App.css\";\n\n\n\n\nconst App = () => {\n  return (\n      <div className=\"App\">\n        <BrowserRouter>\n          <Header />\n          <IndexRoutes />\n        </BrowserRouter>\n      </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}